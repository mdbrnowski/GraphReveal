# Generated from QueryLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,193,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,1,0,4,0,31,8,0,11,0,12,0,32,1,0,1,0,1,1,4,1,38,8,1,11,1,
        12,1,39,1,2,1,2,1,3,1,3,1,3,1,3,3,3,48,8,3,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,78,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,3,5,90,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,112,8,6,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,3,11,164,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,
        185,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,0,0,14,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,1,0,3,3,
        0,9,10,13,13,32,32,1,0,48,57,2,0,44,44,59,59,205,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,30,1,0,0,0,3,37,1,0,0,0,5,41,1,
        0,0,0,7,47,1,0,0,0,9,77,1,0,0,0,11,89,1,0,0,0,13,111,1,0,0,0,15,
        113,1,0,0,0,17,121,1,0,0,0,19,131,1,0,0,0,21,140,1,0,0,0,23,163,
        1,0,0,0,25,184,1,0,0,0,27,186,1,0,0,0,29,31,7,0,0,0,30,29,1,0,0,
        0,31,32,1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,34,1,0,0,0,34,35,
        6,0,0,0,35,2,1,0,0,0,36,38,7,1,0,0,37,36,1,0,0,0,38,39,1,0,0,0,39,
        37,1,0,0,0,39,40,1,0,0,0,40,4,1,0,0,0,41,42,7,2,0,0,42,6,1,0,0,0,
        43,44,5,110,0,0,44,45,5,111,0,0,45,48,5,116,0,0,46,48,5,33,0,0,47,
        43,1,0,0,0,47,46,1,0,0,0,48,8,1,0,0,0,49,50,5,118,0,0,50,51,5,101,
        0,0,51,52,5,114,0,0,52,53,5,116,0,0,53,54,5,101,0,0,54,78,5,120,
        0,0,55,56,5,118,0,0,56,57,5,101,0,0,57,58,5,114,0,0,58,59,5,116,
        0,0,59,60,5,105,0,0,60,61,5,99,0,0,61,62,5,101,0,0,62,78,5,115,0,
        0,63,64,5,118,0,0,64,65,5,101,0,0,65,66,5,114,0,0,66,67,5,116,0,
        0,67,68,5,101,0,0,68,69,5,120,0,0,69,70,5,101,0,0,70,78,5,115,0,
        0,71,72,5,118,0,0,72,73,5,101,0,0,73,74,5,114,0,0,74,75,5,116,0,
        0,75,78,5,115,0,0,76,78,5,86,0,0,77,49,1,0,0,0,77,55,1,0,0,0,77,
        63,1,0,0,0,77,71,1,0,0,0,77,76,1,0,0,0,78,10,1,0,0,0,79,80,5,101,
        0,0,80,81,5,100,0,0,81,82,5,103,0,0,82,90,5,101,0,0,83,84,5,101,
        0,0,84,85,5,100,0,0,85,86,5,103,0,0,86,87,5,101,0,0,87,90,5,115,
        0,0,88,90,5,69,0,0,89,79,1,0,0,0,89,83,1,0,0,0,89,88,1,0,0,0,90,
        12,1,0,0,0,91,92,5,99,0,0,92,93,5,111,0,0,93,94,5,109,0,0,94,95,
        5,112,0,0,95,96,5,111,0,0,96,97,5,110,0,0,97,98,5,101,0,0,98,99,
        5,110,0,0,99,112,5,116,0,0,100,101,5,99,0,0,101,102,5,111,0,0,102,
        103,5,109,0,0,103,104,5,112,0,0,104,105,5,111,0,0,105,106,5,110,
        0,0,106,107,5,101,0,0,107,108,5,110,0,0,108,109,5,116,0,0,109,112,
        5,115,0,0,110,112,5,67,0,0,111,91,1,0,0,0,111,100,1,0,0,0,111,110,
        1,0,0,0,112,14,1,0,0,0,113,114,5,97,0,0,114,115,5,99,0,0,115,116,
        5,121,0,0,116,117,5,99,0,0,117,118,5,108,0,0,118,119,5,105,0,0,119,
        120,5,99,0,0,120,16,1,0,0,0,121,122,5,98,0,0,122,123,5,105,0,0,123,
        124,5,112,0,0,124,125,5,97,0,0,125,126,5,114,0,0,126,127,5,116,0,
        0,127,128,5,105,0,0,128,129,5,116,0,0,129,130,5,101,0,0,130,18,1,
        0,0,0,131,132,5,99,0,0,132,133,5,111,0,0,133,134,5,109,0,0,134,135,
        5,112,0,0,135,136,5,108,0,0,136,137,5,101,0,0,137,138,5,116,0,0,
        138,139,5,101,0,0,139,20,1,0,0,0,140,141,5,99,0,0,141,142,5,111,
        0,0,142,143,5,110,0,0,143,144,5,110,0,0,144,145,5,101,0,0,145,146,
        5,99,0,0,146,147,5,116,0,0,147,148,5,101,0,0,148,149,5,100,0,0,149,
        22,1,0,0,0,150,151,5,101,0,0,151,152,5,117,0,0,152,153,5,108,0,0,
        153,154,5,101,0,0,154,155,5,114,0,0,155,156,5,105,0,0,156,157,5,
        97,0,0,157,164,5,110,0,0,158,159,5,101,0,0,159,160,5,117,0,0,160,
        161,5,108,0,0,161,162,5,101,0,0,162,164,5,114,0,0,163,150,1,0,0,
        0,163,158,1,0,0,0,164,24,1,0,0,0,165,166,5,104,0,0,166,167,5,97,
        0,0,167,168,5,109,0,0,168,169,5,105,0,0,169,170,5,108,0,0,170,171,
        5,116,0,0,171,172,5,111,0,0,172,173,5,110,0,0,173,174,5,105,0,0,
        174,175,5,97,0,0,175,185,5,110,0,0,176,177,5,104,0,0,177,178,5,97,
        0,0,178,179,5,109,0,0,179,180,5,105,0,0,180,181,5,108,0,0,181,182,
        5,116,0,0,182,183,5,111,0,0,183,185,5,110,0,0,184,165,1,0,0,0,184,
        176,1,0,0,0,185,26,1,0,0,0,186,187,5,112,0,0,187,188,5,108,0,0,188,
        189,5,97,0,0,189,190,5,110,0,0,190,191,5,97,0,0,191,192,5,114,0,
        0,192,28,1,0,0,0,9,0,32,39,47,77,89,111,163,184,1,6,0,0
    ]

class QueryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WHITESPACE = 1
    INTEGER = 2
    SEPERATOR = 3
    NOT = 4
    VERTEX = 5
    EDGE = 6
    COMPONENT = 7
    ACYCLIC = 8
    BIPARTITE = 9
    COMPLETE = 10
    CONNECTED = 11
    EULERIAN = 12
    HAMILTONIAN = 13
    PLANAR = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'acyclic'", "'bipartite'", "'complete'", "'connected'", "'planar'" ]

    symbolicNames = [ "<INVALID>",
            "WHITESPACE", "INTEGER", "SEPERATOR", "NOT", "VERTEX", "EDGE", 
            "COMPONENT", "ACYCLIC", "BIPARTITE", "COMPLETE", "CONNECTED", 
            "EULERIAN", "HAMILTONIAN", "PLANAR" ]

    ruleNames = [ "WHITESPACE", "INTEGER", "SEPERATOR", "NOT", "VERTEX", 
                  "EDGE", "COMPONENT", "ACYCLIC", "BIPARTITE", "COMPLETE", 
                  "CONNECTED", "EULERIAN", "HAMILTONIAN", "PLANAR" ]

    grammarFileName = "QueryLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


