# Generated from QueryLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,169,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,
        0,4,0,29,8,0,11,0,12,0,30,1,0,1,0,1,1,4,1,36,8,1,11,1,12,1,37,1,
        2,1,2,1,3,1,3,1,3,1,3,3,3,46,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,3,4,76,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,3,5,88,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,140,8,10,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,3,11,161,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,0,
        0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,1,0,3,3,0,9,10,13,13,32,32,1,0,48,57,2,0,44,44,59,59,179,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,1,28,1,0,0,0,3,35,1,0,0,0,5,39,1,0,
        0,0,7,45,1,0,0,0,9,75,1,0,0,0,11,87,1,0,0,0,13,89,1,0,0,0,15,97,
        1,0,0,0,17,107,1,0,0,0,19,116,1,0,0,0,21,139,1,0,0,0,23,160,1,0,
        0,0,25,162,1,0,0,0,27,29,7,0,0,0,28,27,1,0,0,0,29,30,1,0,0,0,30,
        28,1,0,0,0,30,31,1,0,0,0,31,32,1,0,0,0,32,33,6,0,0,0,33,2,1,0,0,
        0,34,36,7,1,0,0,35,34,1,0,0,0,36,37,1,0,0,0,37,35,1,0,0,0,37,38,
        1,0,0,0,38,4,1,0,0,0,39,40,7,2,0,0,40,6,1,0,0,0,41,42,5,110,0,0,
        42,43,5,111,0,0,43,46,5,116,0,0,44,46,5,33,0,0,45,41,1,0,0,0,45,
        44,1,0,0,0,46,8,1,0,0,0,47,48,5,118,0,0,48,49,5,101,0,0,49,50,5,
        114,0,0,50,51,5,116,0,0,51,52,5,101,0,0,52,76,5,120,0,0,53,54,5,
        118,0,0,54,55,5,101,0,0,55,56,5,114,0,0,56,57,5,116,0,0,57,58,5,
        105,0,0,58,59,5,99,0,0,59,60,5,101,0,0,60,76,5,115,0,0,61,62,5,118,
        0,0,62,63,5,101,0,0,63,64,5,114,0,0,64,65,5,116,0,0,65,66,5,101,
        0,0,66,67,5,120,0,0,67,68,5,101,0,0,68,76,5,115,0,0,69,70,5,118,
        0,0,70,71,5,101,0,0,71,72,5,114,0,0,72,73,5,116,0,0,73,76,5,115,
        0,0,74,76,5,86,0,0,75,47,1,0,0,0,75,53,1,0,0,0,75,61,1,0,0,0,75,
        69,1,0,0,0,75,74,1,0,0,0,76,10,1,0,0,0,77,78,5,101,0,0,78,79,5,100,
        0,0,79,80,5,103,0,0,80,88,5,101,0,0,81,82,5,101,0,0,82,83,5,100,
        0,0,83,84,5,103,0,0,84,85,5,101,0,0,85,88,5,115,0,0,86,88,5,69,0,
        0,87,77,1,0,0,0,87,81,1,0,0,0,87,86,1,0,0,0,88,12,1,0,0,0,89,90,
        5,97,0,0,90,91,5,99,0,0,91,92,5,121,0,0,92,93,5,99,0,0,93,94,5,108,
        0,0,94,95,5,105,0,0,95,96,5,99,0,0,96,14,1,0,0,0,97,98,5,98,0,0,
        98,99,5,105,0,0,99,100,5,112,0,0,100,101,5,97,0,0,101,102,5,114,
        0,0,102,103,5,116,0,0,103,104,5,105,0,0,104,105,5,116,0,0,105,106,
        5,101,0,0,106,16,1,0,0,0,107,108,5,99,0,0,108,109,5,111,0,0,109,
        110,5,109,0,0,110,111,5,112,0,0,111,112,5,108,0,0,112,113,5,101,
        0,0,113,114,5,116,0,0,114,115,5,101,0,0,115,18,1,0,0,0,116,117,5,
        99,0,0,117,118,5,111,0,0,118,119,5,110,0,0,119,120,5,110,0,0,120,
        121,5,101,0,0,121,122,5,99,0,0,122,123,5,116,0,0,123,124,5,101,0,
        0,124,125,5,100,0,0,125,20,1,0,0,0,126,127,5,101,0,0,127,128,5,117,
        0,0,128,129,5,108,0,0,129,130,5,101,0,0,130,131,5,114,0,0,131,132,
        5,105,0,0,132,133,5,97,0,0,133,140,5,110,0,0,134,135,5,101,0,0,135,
        136,5,117,0,0,136,137,5,108,0,0,137,138,5,101,0,0,138,140,5,114,
        0,0,139,126,1,0,0,0,139,134,1,0,0,0,140,22,1,0,0,0,141,142,5,104,
        0,0,142,143,5,97,0,0,143,144,5,109,0,0,144,145,5,105,0,0,145,146,
        5,108,0,0,146,147,5,116,0,0,147,148,5,111,0,0,148,149,5,110,0,0,
        149,150,5,105,0,0,150,151,5,97,0,0,151,161,5,110,0,0,152,153,5,104,
        0,0,153,154,5,97,0,0,154,155,5,109,0,0,155,156,5,105,0,0,156,157,
        5,108,0,0,157,158,5,116,0,0,158,159,5,111,0,0,159,161,5,110,0,0,
        160,141,1,0,0,0,160,152,1,0,0,0,161,24,1,0,0,0,162,163,5,112,0,0,
        163,164,5,108,0,0,164,165,5,97,0,0,165,166,5,110,0,0,166,167,5,97,
        0,0,167,168,5,114,0,0,168,26,1,0,0,0,8,0,30,37,45,75,87,139,160,
        1,6,0,0
    ]

class QueryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WHITESPACE = 1
    INTEGER = 2
    SEPERATOR = 3
    NOT = 4
    VERTEX = 5
    EDGE = 6
    ACYCLIC = 7
    BIPARTITE = 8
    COMPLETE = 9
    CONNECTED = 10
    EULERIAN = 11
    HAMILTONIAN = 12
    PLANAR = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'acyclic'", "'bipartite'", "'complete'", "'connected'", "'planar'" ]

    symbolicNames = [ "<INVALID>",
            "WHITESPACE", "INTEGER", "SEPERATOR", "NOT", "VERTEX", "EDGE", 
            "ACYCLIC", "BIPARTITE", "COMPLETE", "CONNECTED", "EULERIAN", 
            "HAMILTONIAN", "PLANAR" ]

    ruleNames = [ "WHITESPACE", "INTEGER", "SEPERATOR", "NOT", "VERTEX", 
                  "EDGE", "ACYCLIC", "BIPARTITE", "COMPLETE", "CONNECTED", 
                  "EULERIAN", "HAMILTONIAN", "PLANAR" ]

    grammarFileName = "QueryLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


