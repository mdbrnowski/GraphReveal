# Generated from QueryLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,16,256,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,1,0,4,0,35,8,0,11,0,12,0,36,1,0,1,0,
        1,1,4,1,42,8,1,11,1,12,1,43,1,2,1,2,1,3,1,3,1,3,1,3,3,3,52,8,3,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,3,4,91,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,3,5,103,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,125,8,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,140,8,7,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,184,8,11,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,3,12,205,8,12,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,3,13,243,8,13,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,0,0,16,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,1,0,3,3,0,
        9,10,13,13,32,32,1,0,48,57,2,0,44,44,59,59,273,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,34,1,0,
        0,0,3,41,1,0,0,0,5,45,1,0,0,0,7,51,1,0,0,0,9,90,1,0,0,0,11,102,1,
        0,0,0,13,124,1,0,0,0,15,139,1,0,0,0,17,141,1,0,0,0,19,151,1,0,0,
        0,21,160,1,0,0,0,23,183,1,0,0,0,25,204,1,0,0,0,27,242,1,0,0,0,29,
        244,1,0,0,0,31,251,1,0,0,0,33,35,7,0,0,0,34,33,1,0,0,0,35,36,1,0,
        0,0,36,34,1,0,0,0,36,37,1,0,0,0,37,38,1,0,0,0,38,39,6,0,0,0,39,2,
        1,0,0,0,40,42,7,1,0,0,41,40,1,0,0,0,42,43,1,0,0,0,43,41,1,0,0,0,
        43,44,1,0,0,0,44,4,1,0,0,0,45,46,7,2,0,0,46,6,1,0,0,0,47,48,5,110,
        0,0,48,49,5,111,0,0,49,52,5,116,0,0,50,52,5,33,0,0,51,47,1,0,0,0,
        51,50,1,0,0,0,52,8,1,0,0,0,53,54,5,118,0,0,54,55,5,101,0,0,55,56,
        5,114,0,0,56,57,5,116,0,0,57,58,5,101,0,0,58,91,5,120,0,0,59,60,
        5,118,0,0,60,61,5,101,0,0,61,62,5,114,0,0,62,63,5,116,0,0,63,64,
        5,105,0,0,64,65,5,99,0,0,65,66,5,101,0,0,66,91,5,115,0,0,67,68,5,
        118,0,0,68,69,5,101,0,0,69,70,5,114,0,0,70,71,5,116,0,0,71,72,5,
        101,0,0,72,73,5,120,0,0,73,74,5,101,0,0,74,91,5,115,0,0,75,76,5,
        118,0,0,76,77,5,101,0,0,77,78,5,114,0,0,78,79,5,116,0,0,79,91,5,
        115,0,0,80,91,5,86,0,0,81,82,5,110,0,0,82,83,5,111,0,0,83,84,5,100,
        0,0,84,91,5,101,0,0,85,86,5,110,0,0,86,87,5,111,0,0,87,88,5,100,
        0,0,88,89,5,101,0,0,89,91,5,115,0,0,90,53,1,0,0,0,90,59,1,0,0,0,
        90,67,1,0,0,0,90,75,1,0,0,0,90,80,1,0,0,0,90,81,1,0,0,0,90,85,1,
        0,0,0,91,10,1,0,0,0,92,93,5,101,0,0,93,94,5,100,0,0,94,95,5,103,
        0,0,95,103,5,101,0,0,96,97,5,101,0,0,97,98,5,100,0,0,98,99,5,103,
        0,0,99,100,5,101,0,0,100,103,5,115,0,0,101,103,5,69,0,0,102,92,1,
        0,0,0,102,96,1,0,0,0,102,101,1,0,0,0,103,12,1,0,0,0,104,105,5,99,
        0,0,105,106,5,111,0,0,106,107,5,109,0,0,107,108,5,112,0,0,108,109,
        5,111,0,0,109,110,5,110,0,0,110,111,5,101,0,0,111,112,5,110,0,0,
        112,125,5,116,0,0,113,114,5,99,0,0,114,115,5,111,0,0,115,116,5,109,
        0,0,116,117,5,112,0,0,117,118,5,111,0,0,118,119,5,110,0,0,119,120,
        5,101,0,0,120,121,5,110,0,0,121,122,5,116,0,0,122,125,5,115,0,0,
        123,125,5,67,0,0,124,104,1,0,0,0,124,113,1,0,0,0,124,123,1,0,0,0,
        125,14,1,0,0,0,126,127,5,97,0,0,127,128,5,99,0,0,128,129,5,121,0,
        0,129,130,5,99,0,0,130,131,5,108,0,0,131,132,5,105,0,0,132,140,5,
        99,0,0,133,134,5,102,0,0,134,135,5,111,0,0,135,136,5,114,0,0,136,
        137,5,101,0,0,137,138,5,115,0,0,138,140,5,116,0,0,139,126,1,0,0,
        0,139,133,1,0,0,0,140,16,1,0,0,0,141,142,5,98,0,0,142,143,5,105,
        0,0,143,144,5,112,0,0,144,145,5,97,0,0,145,146,5,114,0,0,146,147,
        5,116,0,0,147,148,5,105,0,0,148,149,5,116,0,0,149,150,5,101,0,0,
        150,18,1,0,0,0,151,152,5,99,0,0,152,153,5,111,0,0,153,154,5,109,
        0,0,154,155,5,112,0,0,155,156,5,108,0,0,156,157,5,101,0,0,157,158,
        5,116,0,0,158,159,5,101,0,0,159,20,1,0,0,0,160,161,5,99,0,0,161,
        162,5,111,0,0,162,163,5,110,0,0,163,164,5,110,0,0,164,165,5,101,
        0,0,165,166,5,99,0,0,166,167,5,116,0,0,167,168,5,101,0,0,168,169,
        5,100,0,0,169,22,1,0,0,0,170,171,5,101,0,0,171,172,5,117,0,0,172,
        173,5,108,0,0,173,174,5,101,0,0,174,175,5,114,0,0,175,176,5,105,
        0,0,176,177,5,97,0,0,177,184,5,110,0,0,178,179,5,101,0,0,179,180,
        5,117,0,0,180,181,5,108,0,0,181,182,5,101,0,0,182,184,5,114,0,0,
        183,170,1,0,0,0,183,178,1,0,0,0,184,24,1,0,0,0,185,186,5,104,0,0,
        186,187,5,97,0,0,187,188,5,109,0,0,188,189,5,105,0,0,189,190,5,108,
        0,0,190,191,5,116,0,0,191,192,5,111,0,0,192,193,5,110,0,0,193,194,
        5,105,0,0,194,195,5,97,0,0,195,205,5,110,0,0,196,197,5,104,0,0,197,
        198,5,97,0,0,198,199,5,109,0,0,199,200,5,105,0,0,200,201,5,108,0,
        0,201,202,5,116,0,0,202,203,5,111,0,0,203,205,5,110,0,0,204,185,
        1,0,0,0,204,196,1,0,0,0,205,26,1,0,0,0,206,207,5,110,0,0,207,208,
        5,111,0,0,208,209,5,32,0,0,209,210,5,105,0,0,210,211,5,115,0,0,211,
        212,5,111,0,0,212,213,5,108,0,0,213,214,5,97,0,0,214,215,5,116,0,
        0,215,216,5,101,0,0,216,217,5,100,0,0,217,218,5,32,0,0,218,219,5,
        118,0,0,219,220,5,101,0,0,220,221,5,114,0,0,221,222,5,116,0,0,222,
        223,5,105,0,0,223,224,5,99,0,0,224,225,5,101,0,0,225,243,5,115,0,
        0,226,227,5,110,0,0,227,228,5,111,0,0,228,229,5,32,0,0,229,230,5,
        105,0,0,230,231,5,115,0,0,231,232,5,111,0,0,232,233,5,108,0,0,233,
        234,5,97,0,0,234,235,5,116,0,0,235,236,5,101,0,0,236,237,5,100,0,
        0,237,238,5,32,0,0,238,243,5,118,0,0,239,240,5,110,0,0,240,241,5,
        105,0,0,241,243,5,118,0,0,242,206,1,0,0,0,242,226,1,0,0,0,242,239,
        1,0,0,0,243,28,1,0,0,0,244,245,5,112,0,0,245,246,5,108,0,0,246,247,
        5,97,0,0,247,248,5,110,0,0,248,249,5,97,0,0,249,250,5,114,0,0,250,
        30,1,0,0,0,251,252,5,116,0,0,252,253,5,114,0,0,253,254,5,101,0,0,
        254,255,5,101,0,0,255,32,1,0,0,0,11,0,36,43,51,90,102,124,139,183,
        204,242,1,6,0,0
    ]

class QueryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WHITESPACE = 1
    INTEGER = 2
    SEPERATOR = 3
    NOT = 4
    VERTEX = 5
    EDGE = 6
    COMPONENT = 7
    ACYCLIC = 8
    BIPARTITE = 9
    COMPLETE = 10
    CONNECTED = 11
    EULERIAN = 12
    HAMILTONIAN = 13
    NO_ISOLATED_V = 14
    PLANAR = 15
    TREE = 16

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'bipartite'", "'complete'", "'connected'", "'planar'", "'tree'" ]

    symbolicNames = [ "<INVALID>",
            "WHITESPACE", "INTEGER", "SEPERATOR", "NOT", "VERTEX", "EDGE", 
            "COMPONENT", "ACYCLIC", "BIPARTITE", "COMPLETE", "CONNECTED", 
            "EULERIAN", "HAMILTONIAN", "NO_ISOLATED_V", "PLANAR", "TREE" ]

    ruleNames = [ "WHITESPACE", "INTEGER", "SEPERATOR", "NOT", "VERTEX", 
                  "EDGE", "COMPONENT", "ACYCLIC", "BIPARTITE", "COMPLETE", 
                  "CONNECTED", "EULERIAN", "HAMILTONIAN", "NO_ISOLATED_V", 
                  "PLANAR", "TREE" ]

    grammarFileName = "QueryLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


