# Generated from QueryLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,207,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,1,0,4,0,33,8,0,11,0,12,0,34,1,0,1,0,1,1,4,1,40,
        8,1,11,1,12,1,41,1,2,1,2,1,3,1,3,1,3,1,3,3,3,50,8,3,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,80,8,4,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,3,5,92,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,114,8,6,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,129,8,7,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,173,
        8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,194,8,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,0,0,15,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        1,0,3,3,0,9,10,13,13,32,32,1,0,48,57,2,0,44,44,59,59,220,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,32,1,0,0,0,
        3,39,1,0,0,0,5,43,1,0,0,0,7,49,1,0,0,0,9,79,1,0,0,0,11,91,1,0,0,
        0,13,113,1,0,0,0,15,128,1,0,0,0,17,130,1,0,0,0,19,140,1,0,0,0,21,
        149,1,0,0,0,23,172,1,0,0,0,25,193,1,0,0,0,27,195,1,0,0,0,29,202,
        1,0,0,0,31,33,7,0,0,0,32,31,1,0,0,0,33,34,1,0,0,0,34,32,1,0,0,0,
        34,35,1,0,0,0,35,36,1,0,0,0,36,37,6,0,0,0,37,2,1,0,0,0,38,40,7,1,
        0,0,39,38,1,0,0,0,40,41,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,4,
        1,0,0,0,43,44,7,2,0,0,44,6,1,0,0,0,45,46,5,110,0,0,46,47,5,111,0,
        0,47,50,5,116,0,0,48,50,5,33,0,0,49,45,1,0,0,0,49,48,1,0,0,0,50,
        8,1,0,0,0,51,52,5,118,0,0,52,53,5,101,0,0,53,54,5,114,0,0,54,55,
        5,116,0,0,55,56,5,101,0,0,56,80,5,120,0,0,57,58,5,118,0,0,58,59,
        5,101,0,0,59,60,5,114,0,0,60,61,5,116,0,0,61,62,5,105,0,0,62,63,
        5,99,0,0,63,64,5,101,0,0,64,80,5,115,0,0,65,66,5,118,0,0,66,67,5,
        101,0,0,67,68,5,114,0,0,68,69,5,116,0,0,69,70,5,101,0,0,70,71,5,
        120,0,0,71,72,5,101,0,0,72,80,5,115,0,0,73,74,5,118,0,0,74,75,5,
        101,0,0,75,76,5,114,0,0,76,77,5,116,0,0,77,80,5,115,0,0,78,80,5,
        86,0,0,79,51,1,0,0,0,79,57,1,0,0,0,79,65,1,0,0,0,79,73,1,0,0,0,79,
        78,1,0,0,0,80,10,1,0,0,0,81,82,5,101,0,0,82,83,5,100,0,0,83,84,5,
        103,0,0,84,92,5,101,0,0,85,86,5,101,0,0,86,87,5,100,0,0,87,88,5,
        103,0,0,88,89,5,101,0,0,89,92,5,115,0,0,90,92,5,69,0,0,91,81,1,0,
        0,0,91,85,1,0,0,0,91,90,1,0,0,0,92,12,1,0,0,0,93,94,5,99,0,0,94,
        95,5,111,0,0,95,96,5,109,0,0,96,97,5,112,0,0,97,98,5,111,0,0,98,
        99,5,110,0,0,99,100,5,101,0,0,100,101,5,110,0,0,101,114,5,116,0,
        0,102,103,5,99,0,0,103,104,5,111,0,0,104,105,5,109,0,0,105,106,5,
        112,0,0,106,107,5,111,0,0,107,108,5,110,0,0,108,109,5,101,0,0,109,
        110,5,110,0,0,110,111,5,116,0,0,111,114,5,115,0,0,112,114,5,67,0,
        0,113,93,1,0,0,0,113,102,1,0,0,0,113,112,1,0,0,0,114,14,1,0,0,0,
        115,116,5,97,0,0,116,117,5,99,0,0,117,118,5,121,0,0,118,119,5,99,
        0,0,119,120,5,108,0,0,120,121,5,105,0,0,121,129,5,99,0,0,122,123,
        5,102,0,0,123,124,5,111,0,0,124,125,5,114,0,0,125,126,5,101,0,0,
        126,127,5,115,0,0,127,129,5,116,0,0,128,115,1,0,0,0,128,122,1,0,
        0,0,129,16,1,0,0,0,130,131,5,98,0,0,131,132,5,105,0,0,132,133,5,
        112,0,0,133,134,5,97,0,0,134,135,5,114,0,0,135,136,5,116,0,0,136,
        137,5,105,0,0,137,138,5,116,0,0,138,139,5,101,0,0,139,18,1,0,0,0,
        140,141,5,99,0,0,141,142,5,111,0,0,142,143,5,109,0,0,143,144,5,112,
        0,0,144,145,5,108,0,0,145,146,5,101,0,0,146,147,5,116,0,0,147,148,
        5,101,0,0,148,20,1,0,0,0,149,150,5,99,0,0,150,151,5,111,0,0,151,
        152,5,110,0,0,152,153,5,110,0,0,153,154,5,101,0,0,154,155,5,99,0,
        0,155,156,5,116,0,0,156,157,5,101,0,0,157,158,5,100,0,0,158,22,1,
        0,0,0,159,160,5,101,0,0,160,161,5,117,0,0,161,162,5,108,0,0,162,
        163,5,101,0,0,163,164,5,114,0,0,164,165,5,105,0,0,165,166,5,97,0,
        0,166,173,5,110,0,0,167,168,5,101,0,0,168,169,5,117,0,0,169,170,
        5,108,0,0,170,171,5,101,0,0,171,173,5,114,0,0,172,159,1,0,0,0,172,
        167,1,0,0,0,173,24,1,0,0,0,174,175,5,104,0,0,175,176,5,97,0,0,176,
        177,5,109,0,0,177,178,5,105,0,0,178,179,5,108,0,0,179,180,5,116,
        0,0,180,181,5,111,0,0,181,182,5,110,0,0,182,183,5,105,0,0,183,184,
        5,97,0,0,184,194,5,110,0,0,185,186,5,104,0,0,186,187,5,97,0,0,187,
        188,5,109,0,0,188,189,5,105,0,0,189,190,5,108,0,0,190,191,5,116,
        0,0,191,192,5,111,0,0,192,194,5,110,0,0,193,174,1,0,0,0,193,185,
        1,0,0,0,194,26,1,0,0,0,195,196,5,112,0,0,196,197,5,108,0,0,197,198,
        5,97,0,0,198,199,5,110,0,0,199,200,5,97,0,0,200,201,5,114,0,0,201,
        28,1,0,0,0,202,203,5,116,0,0,203,204,5,114,0,0,204,205,5,101,0,0,
        205,206,5,101,0,0,206,30,1,0,0,0,10,0,34,41,49,79,91,113,128,172,
        193,1,6,0,0
    ]

class QueryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WHITESPACE = 1
    INTEGER = 2
    SEPERATOR = 3
    NOT = 4
    VERTEX = 5
    EDGE = 6
    COMPONENT = 7
    ACYCLIC = 8
    BIPARTITE = 9
    COMPLETE = 10
    CONNECTED = 11
    EULERIAN = 12
    HAMILTONIAN = 13
    PLANAR = 14
    TREE = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'bipartite'", "'complete'", "'connected'", "'planar'", "'tree'" ]

    symbolicNames = [ "<INVALID>",
            "WHITESPACE", "INTEGER", "SEPERATOR", "NOT", "VERTEX", "EDGE", 
            "COMPONENT", "ACYCLIC", "BIPARTITE", "COMPLETE", "CONNECTED", 
            "EULERIAN", "HAMILTONIAN", "PLANAR", "TREE" ]

    ruleNames = [ "WHITESPACE", "INTEGER", "SEPERATOR", "NOT", "VERTEX", 
                  "EDGE", "COMPONENT", "ACYCLIC", "BIPARTITE", "COMPLETE", 
                  "CONNECTED", "EULERIAN", "HAMILTONIAN", "PLANAR", "TREE" ]

    grammarFileName = "QueryLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


